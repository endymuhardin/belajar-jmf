/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * KirimWebcam.java
 *
 * Created on Nov 21, 2011, 1:29:38 PM
 */
package belajar;

import java.awt.BorderLayout;
import java.awt.Component;
import java.io.IOException;
import java.util.Vector;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.media.CaptureDeviceInfo;
import javax.media.CaptureDeviceManager;
import javax.media.DataSink;
import javax.media.Format;
import javax.media.IncompatibleSourceException;
import javax.media.Manager;
import javax.media.MediaLocator;
import javax.media.NoDataSourceException;
import javax.media.Player;
import javax.media.Processor;
import javax.media.ProcessorModel;
import javax.media.control.TrackControl;
import javax.media.format.AudioFormat;
import javax.media.format.VideoFormat;
import javax.media.protocol.ContentDescriptor;
import javax.media.protocol.DataSource;
import javax.media.protocol.FileTypeDescriptor;
import javax.media.protocol.SourceCloneable;
import javax.swing.JOptionPane;

/**
 *
 * @author endy
 */
public class StreamingWebcamAudio extends javax.swing.JFrame {

    private DataSource dsDisplay;
    private DataSource dsStreamVideo;
    private DataSource dsAudio;
    private DataSource dsStreamVideoAudio;

    /** Creates new form KirimWebcam */
    public StreamingWebcamAudio() {
        initComponents();
    }

    

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        txtWebcam = new javax.swing.JTextField();
        txtIp = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtPort = new javax.swing.JTextField();
        btnStream = new javax.swing.JButton();
        btnCapture = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setText("Webcam");

        jLabel2.setText("IP Tujuan");

        jLabel3.setText("Port");

        btnStream.setText("Stream");
        btnStream.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnStreamActionPerformed(evt);
            }
        });

        btnCapture.setText("Capture");
        btnCapture.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCaptureActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtWebcam))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtIp, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jLabel3)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtPort, javax.swing.GroupLayout.PREFERRED_SIZE, 96, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnStream)
                    .addComponent(btnCapture))
                .addContainerGap(36, Short.MAX_VALUE))
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {btnCapture, btnStream});

        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtWebcam, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnCapture))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtIp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(txtPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnStream))
                .addContainerGap(34, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel1, java.awt.BorderLayout.PAGE_START);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnStreamActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnStreamActionPerformed
        try {
            String ip = txtIp.getText();
            String port = txtPort.getText();
            String tujuan = "rtp://" + ip + ":" + port + "/video";
            System.out.println("Tujuan streaming : " + tujuan);

            VideoFormat inputFormat = new VideoFormat(VideoFormat.YUV);
            ContentDescriptor outputFormat = new ContentDescriptor(ContentDescriptor.RAW_RTP);

            createStreamingDataSource();
            
            MediaLocator mlTujuan = new MediaLocator(tujuan);
            Processor proc = Manager.createRealizedProcessor(
                    new ProcessorModel(dsStreamVideoAudio,
                    new Format[]{inputFormat},
                    outputFormat));

            int x = 0;
            for (TrackControl t : proc.getTrackControls()) {
                x++;
                System.out.println("Track " + x);
                Format f = t.getFormat();
                System.out.println("Format : " + f.getClass().getName());
                System.out.println("Enabled : " + t.isEnabled());
                System.out.println("Encoding : " + f.getEncoding());
            }


            DataSink sinkTujuan = Manager.createDataSink(proc.getDataOutput(), mlTujuan);

            sinkTujuan.open();
            sinkTujuan.start();
            proc.start();

        } catch (Exception err) {
            err.printStackTrace();
            JOptionPane.showMessageDialog(this,
                    err.getMessage(),
                    "Error",
                    JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnStreamActionPerformed

    private void btnCaptureActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCaptureActionPerformed
        try {
            createVideoDataSource();
            createAudioDataSource();

            System.out.println("Menyiapkan player");
            Player p = Manager.createRealizedPlayer(dsDisplay);
            System.out.println("Player siap");
            Component screen = p.getVisualComponent();
            if (screen == null) {
                JOptionPane.showMessageDialog(this, "Visual Component tidak ada",
                        "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }

            this.getContentPane().add(screen, BorderLayout.CENTER);
            this.getContentPane().add(p.getControlPanelComponent(), BorderLayout.SOUTH);
            p.start();

            // refresh frame
            this.setVisible(false);
            this.setVisible(true);
        } catch (Exception ex) {
            Logger.getLogger(TampilkanWebcam.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, ex.getMessage(),
                    "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnCaptureActionPerformed

    private void createVideoDataSource() throws IOException, NoDataSourceException {
        MediaLocator webcam = new MediaLocator(txtWebcam.getText());
        System.out.println("Membuat media locator " + txtWebcam.getText());

        System.out.println("Membuat datasource yang asli");
        DataSource dsCloneable = Manager.createDataSource(webcam);

        System.out.println("Membuat cloneable datasource untuk ditampilkan");
        dsDisplay = Manager.createCloneableDataSource(dsCloneable);

        
    }
    
    private void createAudioDataSource(){
        try {
            // Audio Format
            Format audioFormat = new AudioFormat(AudioFormat.LINEAR);
            
            // Daftar CaptureDevice yang support
            Vector daftarDevice = CaptureDeviceManager.getDeviceList(audioFormat);
            System.out.println("Jumlah Device : "+daftarDevice.size());
            
            // Gunakan device yang pertama
            CaptureDeviceInfo device = (CaptureDeviceInfo) daftarDevice.firstElement();
            dsAudio = Manager.createDataSource(device.getLocator());
            
        } catch (Exception ex) {
            Logger.getLogger(StreamingWebcamAudio.class.getName()).log(Level.SEVERE, null, ex);
        } 
    }
    
    private void createStreamingDataSource(){
        try {
            System.out.println("Membuat datasource untuk streaming, clone dari dsDisplay");
            dsStreamVideo = ((SourceCloneable) dsDisplay).createClone();
            
            dsStreamVideoAudio = Manager.createMergingDataSource(
                    new DataSource[]{
                        dsStreamVideo, 
                        dsAudio
                    });
        } catch (IncompatibleSourceException ex) {
            Logger.getLogger(StreamingWebcamAudio.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {

            public void run() {
                new StreamingWebcamAudio().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCapture;
    private javax.swing.JButton btnStream;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField txtIp;
    private javax.swing.JTextField txtPort;
    private javax.swing.JTextField txtWebcam;
    // End of variables declaration//GEN-END:variables
}
